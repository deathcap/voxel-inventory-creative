// Generated by CoffeeScript 1.7.0
(function() {
  var CreativeInventoryPlugin, Inventory, InventoryDialog, InventoryWindow, ItemPile,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Inventory = require('inventory');

  InventoryWindow = require('inventory-window');

  InventoryDialog = (require('voxel-inventory-dialog')).InventoryDialog;

  ItemPile = require('itempile');

  module.exports = function(game, opts) {
    return new CreativeInventoryPlugin(game, opts);
  };

  CreativeInventoryPlugin = (function(_super) {
    __extends(CreativeInventoryPlugin, _super);

    function CreativeInventoryPlugin(game, opts) {
      var buttons, div, _ref;
      this.game = game;
      this.registry = (function() {
        if ((_ref = game.plugins.get('voxel-registry')) != null) {
          return _ref;
        } else {
          throw new Error('voxel-creative-inventory requires voxel-registry');
        }
      })();
      div = document.createElement('div');
      this.thisInventory = new Inventory(10, 3);
      this.thisIW = new InventoryWindow({
        inventory: this.thisInventory,
        registry: this.registry
      });
      buttons = document.createElement('div');
      ['items', 'blocks'].forEach((function(_this) {
        return function(category) {
          var button;
          button = document.createElement('button');
          button.textContent = category;
          button.addEventListener('click', function() {
            return _this.populateCategory(category);
          });
          return buttons.appendChild(button);
        };
      })(this));
      div.appendChild(buttons);
      div.appendChild(this.thisIW.createContainer());
      CreativeInventoryPlugin.__super__.constructor.call(this, game, {
        upper: [div]
      });
    }

    CreativeInventoryPlugin.prototype.enable = function() {};

    CreativeInventoryPlugin.prototype.disable = function() {};

    CreativeInventoryPlugin.prototype.open = function() {
      this.populateCategory(this.activeCategory);
      return CreativeInventoryPlugin.__super__.open.call(this, open);
    };

    CreativeInventoryPlugin.prototype.populateCategory = function(category) {
      var i, item, name, _i, _j, _len, _ref, _ref1, _results, _results1;
      if (category == null) {
        category = 'items';
      }
      this.activeCategory = category;
      this.thisInventory.clear();
      if (category === 'items') {
        _ref = Object.keys(this.registry.itemProps);
        _results = [];
        for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
          item = _ref[i];
          _results.push(this.thisInventory.set(i, new ItemPile(item, Infinity)));
        }
        return _results;
      } else if (category === 'blocks') {
        _results1 = [];
        for (i = _j = 1, _ref1 = this.registry.blockProps.length; 1 <= _ref1 ? _j <= _ref1 : _j >= _ref1; i = 1 <= _ref1 ? ++_j : --_j) {
          name = this.registry.getBlockName(i);
          _results1.push(this.thisInventory.set(i - 1, new ItemPile(name, Infinity)));
        }
        return _results1;
      } else {
        return console.log('TODO', category);
      }
    };

    return CreativeInventoryPlugin;

  })(InventoryDialog);

}).call(this);
